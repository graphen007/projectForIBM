// Code generated by protoc-gen-go.
// source: peer/chaincode_proposal.proto
// DO NOT EDIT!

package peer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// ChaincodeHeaderExtension is the Header's extentions message to be used when
// the Header's type is CHAINCODE.  This extensions is used to specify which
// chaincode to invoke and what should appear on the ledger.
type ChaincodeHeaderExtension struct {
	// The PayloadVisibility field controls to what extent the Proposal's payload
	// (recall that for the type CHAINCODE, it is ChaincodeProposalPayload
	// message) field will be visible in the final transaction and in the ledger.
	// Ideally, it would be configurable, supporting at least 3 main “visibility
	// modes”:
	// 1. all bytes of the payload are visible;
	// 2. only a hash of the payload is visible;
	// 3. nothing is visible.
	// Notice that the visibility function may be potentially part of the ESCC.
	// In that case it overrides PayloadVisibility field.  Finally notice that
	// this field impacts the content of ProposalResponsePayload.proposalHash.
	PayloadVisibility []byte `protobuf:"bytes,1,opt,name=payloadVisibility,proto3" json:"payloadVisibility,omitempty"`
	// The ID of the chaincode to target.
	ChaincodeID *ChaincodeID `protobuf:"bytes,2,opt,name=chaincodeID" json:"chaincodeID,omitempty"`
}

func (m *ChaincodeHeaderExtension) Reset()                    { *m = ChaincodeHeaderExtension{} }
func (m *ChaincodeHeaderExtension) String() string            { return proto.CompactTextString(m) }
func (*ChaincodeHeaderExtension) ProtoMessage()               {}
func (*ChaincodeHeaderExtension) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *ChaincodeHeaderExtension) GetChaincodeID() *ChaincodeID {
	if m != nil {
		return m.ChaincodeID
	}
	return nil
}

// ChaincodeProposalPayload is the Proposal's payload message to be used when
// the Header's type is CHAINCODE.  It contains the arguments for this
// invocation.
type ChaincodeProposalPayload struct {
	// Input contains the arguments for this invocation. If this invocation
	// deploys a new chaincode, ESCC/VSCC are part of this field.
	Input []byte `protobuf:"bytes,1,opt,name=Input,proto3" json:"Input,omitempty"`
	// Transient contains data (e.g. cryptographic material) that might be used
	// to implement some form of application-level confidentiality. The contents
	// of this field are supposed to always be omitted from the transaction and
	// excluded from the ledger.
	Transient []byte `protobuf:"bytes,2,opt,name=Transient,proto3" json:"Transient,omitempty"`
}

func (m *ChaincodeProposalPayload) Reset()                    { *m = ChaincodeProposalPayload{} }
func (m *ChaincodeProposalPayload) String() string            { return proto.CompactTextString(m) }
func (*ChaincodeProposalPayload) ProtoMessage()               {}
func (*ChaincodeProposalPayload) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

// ChaincodeAction contains the actions the events generated by the execution
// of the chaincode.
type ChaincodeAction struct {
	// This field contains the read set and the write set produced by the
	// chaincode executing this invocation.
	Results []byte `protobuf:"bytes,1,opt,name=results,proto3" json:"results,omitempty"`
	// This field contains the events generated by the chaincode executing this
	// invocation.
	Events []byte `protobuf:"bytes,2,opt,name=events,proto3" json:"events,omitempty"`
}

func (m *ChaincodeAction) Reset()                    { *m = ChaincodeAction{} }
func (m *ChaincodeAction) String() string            { return proto.CompactTextString(m) }
func (*ChaincodeAction) ProtoMessage()               {}
func (*ChaincodeAction) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func init() {
	proto.RegisterType((*ChaincodeHeaderExtension)(nil), "protos.ChaincodeHeaderExtension")
	proto.RegisterType((*ChaincodeProposalPayload)(nil), "protos.ChaincodeProposalPayload")
	proto.RegisterType((*ChaincodeAction)(nil), "protos.ChaincodeAction")
}

func init() { proto.RegisterFile("peer/chaincode_proposal.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 264 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x64, 0x90, 0xd1, 0x4b, 0xc3, 0x30,
	0x10, 0xc6, 0xa9, 0xe0, 0xc4, 0x6c, 0x20, 0xc6, 0x21, 0x45, 0x14, 0x46, 0x9f, 0x26, 0x4a, 0x03,
	0x8a, 0x7f, 0x80, 0x56, 0xc1, 0xbd, 0xc8, 0x28, 0xe2, 0x83, 0x2f, 0x92, 0xa6, 0xe7, 0x1a, 0x88,
	0x49, 0x48, 0xae, 0x62, 0x9f, 0xfc, 0xd7, 0x65, 0x4b, 0xb6, 0x55, 0xf6, 0x74, 0x7c, 0xf7, 0x1d,
	0xbf, 0xef, 0xee, 0xc8, 0x85, 0x05, 0x70, 0x4c, 0x34, 0x5c, 0x6a, 0x61, 0x6a, 0xf8, 0xb0, 0xce,
	0x58, 0xe3, 0xb9, 0xca, 0xad, 0x33, 0x68, 0xe8, 0x60, 0x55, 0xfc, 0xd9, 0xf8, 0xff, 0x58, 0x70,
	0xb3, 0x5f, 0x92, 0x16, 0xeb, 0xd6, 0x33, 0xf0, 0x1a, 0xdc, 0xd3, 0x0f, 0x82, 0xf6, 0xd2, 0x68,
	0x7a, 0x4d, 0x8e, 0x2d, 0xef, 0x94, 0xe1, 0xf5, 0x9b, 0xf4, 0xb2, 0x92, 0x4a, 0x62, 0x97, 0x26,
	0x93, 0x64, 0x3a, 0x2a, 0x77, 0x0d, 0x7a, 0x47, 0x86, 0x1b, 0xf8, 0xec, 0x31, 0xdd, 0x9b, 0x24,
	0xd3, 0xe1, 0xcd, 0x49, 0x88, 0xf1, 0x79, 0xb1, 0xb5, 0xca, 0xfe, 0x5c, 0xf6, 0xd2, 0x5b, 0x60,
	0x1e, 0x37, 0x9f, 0x07, 0x38, 0x1d, 0x93, 0xfd, 0x99, 0xb6, 0x2d, 0xc6, 0xd0, 0x20, 0xe8, 0x39,
	0x39, 0x7c, 0x75, 0x5c, 0x7b, 0x09, 0x1a, 0x57, 0x31, 0xa3, 0x72, 0xdb, 0xc8, 0x0a, 0x72, 0xb4,
	0xe1, 0xdd, 0x0b, 0x5c, 0xde, 0x91, 0x92, 0x03, 0x07, 0xbe, 0x55, 0xe8, 0x23, 0x68, 0x2d, 0xe9,
	0x29, 0x19, 0xc0, 0x37, 0x68, 0xf4, 0x91, 0x13, 0xd5, 0xc3, 0xd5, 0xfb, 0xe5, 0x42, 0x62, 0xd3,
	0x56, 0xb9, 0x30, 0x5f, 0xac, 0xe9, 0x2c, 0x38, 0x05, 0xf5, 0x02, 0x1c, 0xfb, 0xe4, 0x95, 0x93,
	0x82, 0x85, 0xab, 0xd8, 0xf2, 0xa5, 0x55, 0x78, 0xf0, 0xed, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x97, 0xb9, 0x42, 0xce, 0x88, 0x01, 0x00, 0x00,
}
