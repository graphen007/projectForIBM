// Code generated by protoc-gen-go.
// source: peer/chaincode_transaction.proto
// DO NOT EDIT!

package peer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// ChaincodeActionPayload is the message to be used for the TransactionAction's
// payload when the Header's type is set to CHAINCODE.  It carries the
// chaincodeProposalPayload and an endorsed action to apply to the ledger.
type ChaincodeActionPayload struct {
	// This field contains the bytes of the ChaincodeProposalPayload message from
	// the original invocation (essentially the arguments) after the application
	// of the visibility function. The main visibility modes are "full" (the
	// entire ChaincodeProposalPayload message is included here), "hash" (only
	// the hash of the ChaincodeProposalPayload message is included) or
	// "nothing".  This field will be used to check the consistency of
	// ProposalResponsePayload.proposalHash.  For the CHAINCODE type,
	// ProposalResponsePayload.proposalHash is supposed to be H(ProposalHeader ||
	// f(ChaincodeProposalPayload)) where f is the visibility function.
	ChaincodeProposalPayload []byte `protobuf:"bytes,1,opt,name=chaincodeProposalPayload,proto3" json:"chaincodeProposalPayload,omitempty"`
	// The list of actions to apply to the ledger
	Action *ChaincodeEndorsedAction `protobuf:"bytes,2,opt,name=action" json:"action,omitempty"`
}

func (m *ChaincodeActionPayload) Reset()                    { *m = ChaincodeActionPayload{} }
func (m *ChaincodeActionPayload) String() string            { return proto.CompactTextString(m) }
func (*ChaincodeActionPayload) ProtoMessage()               {}
func (*ChaincodeActionPayload) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *ChaincodeActionPayload) GetAction() *ChaincodeEndorsedAction {
	if m != nil {
		return m.Action
	}
	return nil
}

// ChaincodeEndorsedAction carries information about the endorsement of a
// specific proposal
type ChaincodeEndorsedAction struct {
	// This is the bytes of the ProposalResponsePayload message signed by the
	// endorsers.  Recall that for the CHAINCODE type, the
	// ProposalResponsePayload's extenstion field carries a ChaincodeAction
	ProposalResponsePayload []byte `protobuf:"bytes,1,opt,name=proposalResponsePayload,proto3" json:"proposalResponsePayload,omitempty"`
	// The endorsement of the proposal, basically the endorser's signature over
	// proposalResponsePayload
	Endorsements []*Endorsement `protobuf:"bytes,2,rep,name=endorsements" json:"endorsements,omitempty"`
}

func (m *ChaincodeEndorsedAction) Reset()                    { *m = ChaincodeEndorsedAction{} }
func (m *ChaincodeEndorsedAction) String() string            { return proto.CompactTextString(m) }
func (*ChaincodeEndorsedAction) ProtoMessage()               {}
func (*ChaincodeEndorsedAction) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

func (m *ChaincodeEndorsedAction) GetEndorsements() []*Endorsement {
	if m != nil {
		return m.Endorsements
	}
	return nil
}

func init() {
	proto.RegisterType((*ChaincodeActionPayload)(nil), "protos.ChaincodeActionPayload")
	proto.RegisterType((*ChaincodeEndorsedAction)(nil), "protos.ChaincodeEndorsedAction")
}

func init() { proto.RegisterFile("peer/chaincode_transaction.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 248 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x90, 0x31, 0x4f, 0xc3, 0x30,
	0x14, 0x84, 0xe5, 0x22, 0x75, 0x70, 0x3b, 0x19, 0x89, 0x46, 0x2c, 0x44, 0x65, 0x09, 0x42, 0x4a,
	0xa4, 0x32, 0x14, 0xb1, 0x01, 0xea, 0x5e, 0x65, 0x64, 0x89, 0x1c, 0xfb, 0xd1, 0x44, 0x4a, 0xfd,
	0x2c, 0x3f, 0x33, 0xf4, 0x3f, 0xc0, 0x7f, 0x46, 0xc4, 0x4e, 0x50, 0x86, 0x4c, 0x1e, 0xee, 0xf3,
	0xdd, 0xbd, 0xe3, 0xa9, 0x05, 0x70, 0x85, 0x6a, 0x64, 0x6b, 0x14, 0x6a, 0xa8, 0xbc, 0x93, 0x86,
	0xa4, 0xf2, 0x2d, 0x9a, 0xdc, 0x3a, 0xf4, 0x28, 0x96, 0xfd, 0x43, 0xb7, 0xf7, 0x3d, 0xf9, 0x29,
	0x6b, 0xd7, 0xaa, 0xca, 0x3a, 0xb4, 0x48, 0xb2, 0xab, 0x1c, 0x90, 0x45, 0x43, 0x10, 0xe0, 0xed,
	0x0f, 0xe3, 0x37, 0xef, 0x83, 0xd9, 0x6b, 0x6f, 0x73, 0x94, 0x97, 0x0e, 0xa5, 0x16, 0x2f, 0x3c,
	0x19, 0x63, 0x8e, 0xf1, 0x7b, 0xd4, 0x12, 0x96, 0xb2, 0x6c, 0x5d, 0xce, 0xea, 0x62, 0xcf, 0x97,
	0xa1, 0x53, 0xb2, 0x48, 0x59, 0xb6, 0xda, 0xdd, 0x85, 0x38, 0xca, 0xc7, 0xac, 0x83, 0xd1, 0xe8,
	0x08, 0x74, 0xc8, 0x2c, 0x23, 0xbe, 0xfd, 0x66, 0x7c, 0x33, 0xc3, 0x88, 0x67, 0xbe, 0x19, 0xce,
	0x28, 0xe3, 0x15, 0xd3, 0x3e, 0x73, 0xb2, 0xd8, 0xf3, 0x35, 0x04, 0xaf, 0x33, 0x18, 0x4f, 0xc9,
	0x22, 0xbd, 0xca, 0x56, 0xbb, 0xeb, 0xa1, 0xd4, 0xe1, 0x5f, 0x2b, 0x27, 0xe0, 0xdb, 0xe3, 0xc7,
	0xc3, 0xa9, 0xf5, 0xcd, 0x57, 0x9d, 0x2b, 0x3c, 0x17, 0xcd, 0xc5, 0x82, 0xeb, 0x40, 0x9f, 0xc6,
	0x5d, 0x8b, 0xe0, 0x50, 0xfc, 0x4d, 0x5d, 0x87, 0xe1, 0x9f, 0x7e, 0x03, 0x00, 0x00, 0xff, 0xff,
	0xcd, 0xa1, 0x56, 0xa7, 0xa3, 0x01, 0x00, 0x00,
}
