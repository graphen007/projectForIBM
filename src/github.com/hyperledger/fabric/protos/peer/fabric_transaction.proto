/*
Copyright IBM Corp. 2016 All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

		 http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

option go_package = "github.com/hyperledger/fabric/protos/peer";

package protos;

import "google/protobuf/timestamp.proto";

// This message is necessary to facilitate the verification of the signature
// (in the signature field) over the bytes of the transaction (in the
// transactionBytes field).
message SignedTransaction {

	// The bytes of the Transaction. NDD
	bytes transactionBytes = 1;

	// Signature of the transactionBytes The public key of the signature is in
	// the header field of TransactionAction There might be multiple
	// TransactionAction, so multiple headers, but there should be same
	// transactor identity (cert) in all headers
	bytes signature = 2;
}

// This is used to wrap an invalid Transaction with the cause
message InvalidTransaction {
	enum Cause {
		TxIdAlreadyExists = 0;
		RWConflictDuringCommit = 1;
	}
	Transaction2 transaction = 1;
	Cause cause = 2;
}

// The transaction to be sent to the ordering service. A transaction contains
// one or more TransactionAction. Each TransactionAction binds a proposal to
// potentially multiple actions. The transaction is atomic meaning that either
// all actions in the transaction will be committed or none will.  Note that
// while a Transaction might include more than one Header, the Header.creator
// field must be the same in each.
// A single client is free to issue a number of independent Proposal, each with
// their header (Header) and request payload (ChaincodeProposalPayload).  Each
// proposal is independently endorsed generating an action
// (ProposalResponsePayload) with one signature per Endorser. Any number of
// independent proposals (and their action) might be included in a transaction
// to ensure that they are treated atomically.
message Transaction2 {

	// Version indicates message protocol version.
	int32 version = 1;

	// Timestamp is the local time that the
	// message was created by the sender
	google.protobuf.Timestamp timestamp = 2;

	// The payload is an array of TransactionAction. An array is necessary to
	// accommodate multiple actions per transaction
	repeated TransactionAction actions = 3;
}

// TransactionAction binds a proposal to its action.  The type field in the
// header dictates the type of action to be applied to the ledger.
message TransactionAction {

	// The header of the proposal action, which is the proposal header
	bytes header = 1;

	// The payload of the action as defined by the type in the header For
	// chaincode, it's the bytes of ChaincodeActionPayload
	bytes payload = 2;
}
