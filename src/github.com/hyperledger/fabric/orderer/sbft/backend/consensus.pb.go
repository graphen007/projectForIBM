// Code generated by protoc-gen-go.
// source: backend/consensus.proto
// DO NOT EDIT!

/*
Package backend is a generated protocol buffer package.

It is generated from these files:
	backend/consensus.proto

It has these top-level messages:
	Handshake
*/
package backend

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import simplebft "github.com/hyperledger/fabric/orderer/sbft/simplebft"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Handshake struct {
}

func (m *Handshake) Reset()                    { *m = Handshake{} }
func (m *Handshake) String() string            { return proto.CompactTextString(m) }
func (*Handshake) ProtoMessage()               {}
func (*Handshake) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func init() {
	proto.RegisterType((*Handshake)(nil), "backend.handshake")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Consensus service

type ConsensusClient interface {
	Consensus(ctx context.Context, in *Handshake, opts ...grpc.CallOption) (Consensus_ConsensusClient, error)
}

type consensusClient struct {
	cc *grpc.ClientConn
}

func NewConsensusClient(cc *grpc.ClientConn) ConsensusClient {
	return &consensusClient{cc}
}

func (c *consensusClient) Consensus(ctx context.Context, in *Handshake, opts ...grpc.CallOption) (Consensus_ConsensusClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Consensus_serviceDesc.Streams[0], c.cc, "/backend.consensus/consensus", opts...)
	if err != nil {
		return nil, err
	}
	x := &consensusConsensusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Consensus_ConsensusClient interface {
	Recv() (*simplebft.Msg, error)
	grpc.ClientStream
}

type consensusConsensusClient struct {
	grpc.ClientStream
}

func (x *consensusConsensusClient) Recv() (*simplebft.Msg, error) {
	m := new(simplebft.Msg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Consensus service

type ConsensusServer interface {
	Consensus(*Handshake, Consensus_ConsensusServer) error
}

func RegisterConsensusServer(s *grpc.Server, srv ConsensusServer) {
	s.RegisterService(&_Consensus_serviceDesc, srv)
}

func _Consensus_Consensus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Handshake)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConsensusServer).Consensus(m, &consensusConsensusServer{stream})
}

type Consensus_ConsensusServer interface {
	Send(*simplebft.Msg) error
	grpc.ServerStream
}

type consensusConsensusServer struct {
	grpc.ServerStream
}

func (x *consensusConsensusServer) Send(m *simplebft.Msg) error {
	return x.ServerStream.SendMsg(m)
}

var _Consensus_serviceDesc = grpc.ServiceDesc{
	ServiceName: "backend.consensus",
	HandlerType: (*ConsensusServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "consensus",
			Handler:       _Consensus_Consensus_Handler,
			ServerStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("backend/consensus.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 164 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x4f, 0x4a, 0x4c, 0xce,
	0x4e, 0xcd, 0x4b, 0xd1, 0x4f, 0xce, 0xcf, 0x2b, 0x4e, 0xcd, 0x2b, 0x2e, 0x2d, 0xd6, 0x2b, 0x28,
	0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x4a, 0x48, 0x49, 0x16, 0x67, 0xe6, 0x16, 0xe4, 0xa4, 0x26,
	0xa5, 0x95, 0xe8, 0xc3, 0x59, 0x10, 0x35, 0x4a, 0xdc, 0x5c, 0x9c, 0x19, 0x89, 0x79, 0x29, 0xc5,
	0x19, 0x89, 0xd9, 0xa9, 0x46, 0x0e, 0x5c, 0x9c, 0x70, 0x33, 0x84, 0x8c, 0x91, 0x39, 0x42, 0x7a,
	0x50, 0xb3, 0xf4, 0xe0, 0xaa, 0xa5, 0xf8, 0xf4, 0x10, 0x86, 0xf9, 0x16, 0xa7, 0x2b, 0x31, 0x18,
	0x30, 0x3a, 0x99, 0x44, 0x19, 0xa5, 0x67, 0x96, 0x64, 0x94, 0x26, 0xe9, 0x25, 0xe7, 0xe7, 0xea,
	0x67, 0x54, 0x16, 0xa4, 0x16, 0xe5, 0xa4, 0xa6, 0xa4, 0xa7, 0x16, 0xe9, 0xa7, 0x25, 0x26, 0x15,
	0x65, 0x26, 0xeb, 0xe7, 0x17, 0xa5, 0xa4, 0x16, 0xa5, 0x16, 0xe9, 0x17, 0x83, 0x1c, 0x03, 0x35,
	0x33, 0x89, 0x0d, 0xec, 0x16, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x8b, 0x41, 0xd6,
	0xca, 0x00, 0x00, 0x00,
}
